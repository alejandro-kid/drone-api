import json
import os
import pytest


from src.app import create_app
from src.extensions import db
from src.models.drone_model import Drone
from sqlalchemy import create_engine


def helper(json_info)->any:
    for info in json_info:
        first_row = info.decode("utf-8")
        return json.loads(first_row)

#Test data
medicaments = [
    {
        "name": "eKmT7xC-Toy8zqtRyAaU_K",
        "weight": 102.0,
        "code": "3PW0N9XO8VKN4RYF11F6Q5ZMI2N3BDFSHV33",
        "image": "/9j/4AAQSkZJRgABAQEBLAEsAAD/4gKwSUNDX1BST0ZJTEUAAQEAAAKgbGNtcwQwA" \
            "ABtbnRyUkdCIFhZWiAH5wAFAAgACAAIADBhY3NwQVBQTAAAAAAAAAAAAAAAAAAAAAAAAAA" \
            "AAAAAAAAA9tYAAQAAAADTLWxjbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" \
            "AAAAAAAAAAAAAAAAAAAAA1kZXNjAAABIAAAAEBjcHJ0AAABYAAAADZ3dHB0AAABmAAAABR" \
            "jaGFkAAABrAAAACxyWFlaAAAB2AAAABRiWFlaAAAB7AAAABRnWFlaAAACAAAAABRyVFJDA" \
            "AACFAAAACBnVFJDAAACFAAAACBiVFJDAAACFAAAACBjaHJtAAACNAAAACRkbW5kAAACWAA" \
            "AACRkbWRkAAACfAAAACRtbHVjAAAAAAAAAAEAAAAMZW5VUwAAACQAAAAcAEcASQBNAFAAI" \
            "ABiAHUAaQBsAHQALQBpAG4AIABzAFIARwBCbWx1YwAAAAAAAAABAAAADGVuVVMAAAAaAAA" \
            "AHABQAHUAYgBsAGkAYwAgAEQAbwBtAGEAaQBuAABYWVogAAAAAAAA9tYAAQAAAADTLXNmM" \
            "zIAAAAAAAEMQgAABd7///MlAAAHkwAA/ZD///uh///9ogAAA9wAAMBuWFlaIAAAAAAAAG+" \
            "gAAA49QAAA5BYWVogAAAAAAAAJJ8AAA+EAAC2xFhZWiAAAAAAAABilwAAt4cAABjZcGFyY" \
            "QAAAAAAAwAAAAJmZgAA8qcAAA1ZAAAT0AAACltjaHJtAAAAAAADAAAAAKPXAABUfAAATM0" \
            "AAJmaAAAmZwAAD1xtbHVjAAAAAAAAAAEAAAAMZW5VUwAAAAgAAAAcAEcASQBNAFBtbHVjA" \
            "AAAAAAAAAEAAAAMZW5VUwAAAAgAAAAcAHMAUgBHAEL/2wBDAAMCAgMCAgMDAwMEAwMEBQg" \
            "FBQQEBQoHBwYIDAoMDAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDA" \
            "QMEBAUEBQkFBQkUDQsNFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQ" \
            "UFBQUFBQUFBQUFBT/wgARCABDADIDAREAAhEBAxEB/8QAFQABAQAAAAAAAAAAAAAAAAAAA" \
            "Af/xAAWAQEBAQAAAAAAAAAAAAAAAAAABAj/2gAMAwEAAhADEAAAAY3oKAAAAAAAAAAAAAA" \
            "AAAAAAAAAAAAAAAAAD//EABQQAQAAAAAAAAAAAAAAAAAAAFD/2gAIAQEAAQUCf//EABQRA" \
            "QAAAAAAAAAAAAAAAAAAAFD/2gAIAQMBAT8Bf//EABQRAQAAAAAAAAAAAAAAAAAAAFD/2gA" \
            "IAQIBAT8Bf//EABQQAQAAAAAAAAAAAAAAAAAAAFD/2gAIAQEABj8Cf//EABQQAQAAAAAAA" \
            "AAAAAAAAAAAAFD/2gAIAQEAAT8hf//aAAwDAQACAAMAAAAQbbbbbbbbbbbbbbbbbbbbbbb" \
            "bbbbbbbbf/8QAFBEBAAAAAAAAAAAAAAAAAAAAUP/aAAgBAwEBPxB//8QAFBEBAAAAAAAAA" \
            "AAAAAAAAAAAUP/aAAgBAgEBPxB//8QAFBABAAAAAAAAAAAAAAAAAAAAUP/aAAgBAQABPxB//9k="
    },
    {
        "name": "IWYcE_9gqI",
        "weight": 200.0,
        "code": "J32NRQBL8QG02W03L1X",
        "image": "/9j/4AAQSkZJRgABAQEBLAEsAAD/4gKwSUNDX1BST0ZJTEUAAQEAAAKgbGNtcwQwAA" \
            "BtbnRyUkdCIFhZWiAH5wAFAAgACAAIADBhY3NwQVBQTAAAAAAAAAAAAAAAAAAAAAAAAAAAA" \
            "AAAAAAA9tYAAQAAAADTLWxjbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" \
            "AAAAAAAAAAAAAAAAAA1kZXNjAAABIAAAAEBjcHJ0AAABYAAAADZ3dHB0AAABmAAAABRjaGF" \
            "kAAABrAAAACxyWFlaAAAB2AAAABRiWFlaAAAB7AAAABRnWFlaAAACAAAAABRyVFJDAAACFA" \
            "AAACBnVFJDAAACFAAAACBiVFJDAAACFAAAACBjaHJtAAACNAAAACRkbW5kAAACWAAAACRkb" \
            "WRkAAACfAAAACRtbHVjAAAAAAAAAAEAAAAMZW5VUwAAACQAAAAcAEcASQBNAFAAIABiAHUA" \
            "aQBsAHQALQBpAG4AIABzAFIARwBCbWx1YwAAAAAAAAABAAAADGVuVVMAAAAaAAAAHABQAHU" \
            "AYgBsAGkAYwAgAEQAbwBtAGEAaQBuAABYWVogAAAAAAAA9tYAAQAAAADTLXNmMzIAAAAAAA" \
            "EMQgAABd7///MlAAAHkwAA/ZD///uh///9ogAAA9wAAMBuWFlaIAAAAAAAAG+gAAA49QAAA" \
            "5BYWVogAAAAAAAAJJ8AAA+EAAC2xFhZWiAAAAAAAABilwAAt4cAABjZcGFyYQAAAAAAAwAA" \
            "AAJmZgAA8qcAAA1ZAAAT0AAACltjaHJtAAAAAAADAAAAAKPXAABUfAAATM0AAJmaAAAmZwA" \
            "AD1xtbHVjAAAAAAAAAAEAAAAMZW5VUwAAAAgAAAAcAEcASQBNAFBtbHVjAAAAAAAAAAEAAA" \
            "AMZW5VUwAAAAgAAAAcAHMAUgBHAEL/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYID" \
            "AoMDAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkU" \
            "DQsNFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT" \
            "/wgARCABDADIDAREAAhEBAxEB/8QAFQABAQAAAAAAAAAAAAAAAAAAAAX/xAAWAQEBAQAAAA" \
            "AAAAAAAAAAAAAABgf/2gAMAwEAAhADEAAAAb0hhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH" \
            "//EABQQAQAAAAAAAAAAAAAAAAAAAFD/2gAIAQEAAQUCf//EABQRAQAAAAAAAAAAAAAAAAAA" \
            "AFD/2gAIAQMBAT8Bf//EABQRAQAAAAAAAAAAAAAAAAAAAFD/2gAIAQIBAT8Bf//EABQQAQA" \
            "AAAAAAAAAAAAAAAAAAFD/2gAIAQEABj8Cf//EABQQAQAAAAAAAAAAAAAAAAAAAFD/2gAIAQ" \
            "EAAT8hf//aAAwDAQACAAMAAAAQ/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/A" \
            "P8A/wD/AP8A/wD/AP8A/8QAFBEBAAAAAAAAAAAAAAAAAAAAUP/aAAgBAwEBPxB//8QAFBEB" \
            "AAAAAAAAAAAAAAAAAAAAUP/aAAgBAgEBPxB//8QAFBABAAAAAAAAAAAAAAAAAAAAUP/aAAg" \
            "BAQABPxB//9k="
    },
    {
        "name": "e4GiFm4ot-X9-1wKAoF",
        "weight": 198.0,
        "code": "PGX0W3H80FJAVYUC_SD1LG5YOTEI4Y9WGL7CJDVHU",
        "image": "/9j/4AAQSkZJRgABAQEBLAEsAAD/4gKwSUNDX1BST0ZJTEUAAQEAAAKgbGNtcwQwA" \
            "ABtbnRyUkdCIFhZWiAH5wAFAAgACAAIADBhY3NwQVBQTAAAAAAAAAAAAAAAAAAAAAAAAAA" \
            "AAAAAAAAA9tYAAQAAAADTLWxjbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" \
            "AAAAAAAAAAAAAAAAAAAAA1kZXNjAAABIAAAAEBjcHJ0AAABYAAAADZ3dHB0AAABmAAAABR" \
            "jaGFkAAABrAAAACxyWFlaAAAB2AAAABRiWFlaAAAB7AAAABRnWFlaAAACAAAAABRyVFJDA" \
            "AACFAAAACBnVFJDAAACFAAAACBiVFJDAAACFAAAACBjaHJtAAACNAAAACRkbW5kAAACWAA" \
            "AACRkbWRkAAACfAAAACRtbHVjAAAAAAAAAAEAAAAMZW5VUwAAACQAAAAcAEcASQBNAFAAI" \
            "ABiAHUAaQBsAHQALQBpAG4AIABzAFIARwBCbWx1YwAAAAAAAAABAAAADGVuVVMAAAAaAAA" \
            "AHABQAHUAYgBsAGkAYwAgAEQAbwBtAGEAaQBuAABYWVogAAAAAAAA9tYAAQAAAADTLXNmM" \
            "zIAAAAAAAEMQgAABd7///MlAAAHkwAA/ZD///uh///9ogAAA9wAAMBuWFlaIAAAAAAAAG+" \
            "gAAA49QAAA5BYWVogAAAAAAAAJJ8AAA+EAAC2xFhZWiAAAAAAAABilwAAt4cAABjZcGFyY" \
            "QAAAAAAAwAAAAJmZgAA8qcAAA1ZAAAT0AAACltjaHJtAAAAAAADAAAAAKPXAABUfAAATM0" \
            "AAJmaAAAmZwAAD1xtbHVjAAAAAAAAAAEAAAAMZW5VUwAAAAgAAAAcAEcASQBNAFBtbHVjA" \
            "AAAAAAAAAEAAAAMZW5VUwAAAAgAAAAcAHMAUgBHAEL/2wBDAAMCAgMCAgMDAwMEAwMEBQg" \
            "FBQQEBQoHBwYIDAoMDAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDA" \
            "QMEBAUEBQkFBQkUDQsNFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQ" \
            "UFBQUFBQUFBQUFBT/wgARCABDADIDAREAAhEBAxEB/8QAFQABAQAAAAAAAAAAAAAAAAAAA" \
            "Af/xAAWAQEBAQAAAAAAAAAAAAAAAAAABAj/2gAMAwEAAhADEAAAAY3oKAAAAAAAAAAAAAA" \
            "AAAAAAAAAAAAAAAAAD//EABQQAQAAAAAAAAAAAAAAAAAAAFD/2gAIAQEAAQUCf//EABQRA" \
            "QAAAAAAAAAAAAAAAAAAAFD/2gAIAQMBAT8Bf//EABQRAQAAAAAAAAAAAAAAAAAAAFD/2gA" \
            "IAQIBAT8Bf//EABQQAQAAAAAAAAAAAAAAAAAAAFD/2gAIAQEABj8Cf//EABQQAQAAAAAAA" \
            "AAAAAAAAAAAAFD/2gAIAQEAAT8hf//aAAwDAQACAAMAAAAQbbbbbbbbbbbbbbbbbbbbbbb" \
            "bbbbbbbbf/8QAFBEBAAAAAAAAAAAAAAAAAAAAUP/aAAgBAwEBPxB//8QAFBEBAAAAAAAAA" \
            "AAAAAAAAAAAUP/aAAgBAgEBPxB//8QAFBABAAAAAAAAAAAAAAAAAAAAUP/aAAgBAQABPxB//9k="
    },
    {
        "name": "POF3KuKdBiBnsZqs2UOgIu",
        "weight": 449.0,
        "code": "U2TRSUT5LRDQ9K",
        "image": "/9j/4AAQSkZJRgABAQEBLAEsAAD/4gKwSUNDX1BST0ZJTEUAAQEAAAKgbGNtcwQwAA" \
            "BtbnRyUkdCIFhZWiAH5wAFAAgACAAIADBhY3NwQVBQTAAAAAAAAAAAAAAAAAAAAAAAAAAAA" \
            "AAAAAAA9tYAAQAAAADTLWxjbXMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" \
            "AAAAAAAAAAAAAAAAAA1kZXNjAAABIAAAAEBjcHJ0AAABYAAAADZ3dHB0AAABmAAAABRjaGF" \
            "kAAABrAAAACxyWFlaAAAB2AAAABRiWFlaAAAB7AAAABRnWFlaAAACAAAAABRyVFJDAAACFA" \
            "AAACBnVFJDAAACFAAAACBiVFJDAAACFAAAACBjaHJtAAACNAAAACRkbW5kAAACWAAAACRkb" \
            "WRkAAACfAAAACRtbHVjAAAAAAAAAAEAAAAMZW5VUwAAACQAAAAcAEcASQBNAFAAIABiAHUA" \
            "aQBsAHQALQBpAG4AIABzAFIARwBCbWx1YwAAAAAAAAABAAAADGVuVVMAAAAaAAAAHABQAHU" \
            "AYgBsAGkAYwAgAEQAbwBtAGEAaQBuAABYWVogAAAAAAAA9tYAAQAAAADTLXNmMzIAAAAAAA" \
            "EMQgAABd7///MlAAAHkwAA/ZD///uh///9ogAAA9wAAMBuWFlaIAAAAAAAAG+gAAA49QAAA" \
            "5BYWVogAAAAAAAAJJ8AAA+EAAC2xFhZWiAAAAAAAABilwAAt4cAABjZcGFyYQAAAAAAAwAA" \
            "AAJmZgAA8qcAAA1ZAAAT0AAACltjaHJtAAAAAAADAAAAAKPXAABUfAAATM0AAJmaAAAmZwA" \
            "AD1xtbHVjAAAAAAAAAAEAAAAMZW5VUwAAAAgAAAAcAEcASQBNAFBtbHVjAAAAAAAAAAEAAA" \
            "AMZW5VUwAAAAgAAAAcAHMAUgBHAEL/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYID" \
            "AoMDAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkU" \
            "DQsNFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT" \
            "/wgARCABDADIDAREAAhEBAxEB/8QAFQABAQAAAAAAAAAAAAAAAAAAAAX/xAAWAQEBAQAAAA" \
            "AAAAAAAAAAAAAABgf/2gAMAwEAAhADEAAAAb0hhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH" \
            "//EABQQAQAAAAAAAAAAAAAAAAAAAFD/2gAIAQEAAQUCf//EABQRAQAAAAAAAAAAAAAAAAAA" \
            "AFD/2gAIAQMBAT8Bf//EABQRAQAAAAAAAAAAAAAAAAAAAFD/2gAIAQIBAT8Bf//EABQQAQA" \
            "AAAAAAAAAAAAAAAAAAFD/2gAIAQEABj8Cf//EABQQAQAAAAAAAAAAAAAAAAAAAFD/2gAIAQ" \
            "EAAT8hf//aAAwDAQACAAMAAAAQ/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/A" \
            "P8A/wD/AP8A/wD/AP8A/8QAFBEBAAAAAAAAAAAAAAAAAAAAUP/aAAgBAwEBPxB//8QAFBEB" \
            "AAAAAAAAAAAAAAAAAAAAUP/aAAgBAgEBPxB//8QAFBABAAAAAAAAAAAAAAAAAAAAUP/aAAg" \
            "BAQABPxB//9k="
    }, 
    
]

def fill_drones():
    drone_1 = Drone("LNVotKpL0QmcHjvwJeTz", "Lightweight")
    drone_2 = Drone("QF8bnGItdpWoVP7NPdS4crPS9LckPbuzidr0FvKuS8y", "Middleweight")
    drone_3 = Drone("HTU8L8SO2Xx3EYmkKAz4iuFBY2gAo", "Cruiserweight")
    drone_4 = Drone("Z0S24fHgbvjFpbgTscsX32JfuXcMDBZrOk", "Heavyweight", 24)

    drone_5 = Drone(serial_number="tbGTqKCXYFb", model="Lightweight", state="LOADING")
    drone_6 = Drone(serial_number="kcPyGHjfrhU3TbOp", model="Middleweight", \
                    state="LOADED")
    drone_7 = Drone(serial_number="eLGsWwiJ5Lzn", model="Cruiserweight", \
                    state="DELIVERING")
    drone_8 = Drone(serial_number="jEwQeOv3LFqJee", model="Heavyweight", \
                    state="DELIVERED")
    drone_9 = Drone(serial_number="mOb3Kd0IX4RJdtTVAAET", model="Heavyweight", \
                    state="RETURNING")

    db.session.add(drone_1)
    db.session.add(drone_2)
    db.session.add(drone_3)
    db.session.add(drone_4)
    db.session.add(drone_5)
    db.session.add(drone_6)
    db.session.add(drone_7)
    db.session.add(drone_8)
    db.session.add(drone_9)
    db.session.commit()

@pytest.fixture
def app():

    DB_USER = os.getenv("DB_USER", "postgres")
    DB_PASS = os.getenv("DB_PASS", "postgres")
    DB_NAME = os.getenv("DB_NAME", "drone-api-test")
    DB_HOST = os.getenv("DB_HOST", "localhost")

    SQLALCHEMY_DATABASE_URI = (
        "postgresql://" + f"{DB_PASS}:{DB_USER}@{DB_HOST}/{DB_NAME}"
    )

    params = {
        "DEBUG": False,
        "TESTING": True,
        "WTF_CSRF_ENABLED": False,
        "SQLALCHEMY_DATABASE_URI": SQLALCHEMY_DATABASE_URI
    }

    _app = create_app(settings_override=params)

    engine = create_engine(_app.config["SQLALCHEMY_DATABASE_URI"])
    db.Model.metadata.create_all(engine)

    #Data test
    with _app.app_context():
        fill_drones()

    yield _app
    db.Model.metadata.drop_all(engine)

@pytest.fixture
def client(app):
    """A test client for the app."""
    return app.test_client()
